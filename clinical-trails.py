# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RnVcw7KGngl5iEcAOwblPAdHcO96oPoU
"""

import zipfile, os

zip_path = "/content/ctg-studies.json (1).zip"
extract_dir = "/content/ctg_json1"

with zipfile.ZipFile(zip_path, "r") as z:
    z.extractall(extract_dir)
    print("Extracted files:", len(z.namelist()))
    print("Sample files:", z.namelist()[:5])

import json
import pandas as pd
from dateutil import parser as dparser

def to_date(v):
    try:
        return dparser.parse(str(v), fuzzy=True).date()
    except:
        return None

studies_list, countries_list = [], []

for fname in os.listdir(extract_dir):
    if fname.endswith(".json"):
        fpath = os.path.join(extract_dir, fname)
        with open(fpath, "r") as f:
            trial = json.load(f)

        s = trial.get("protocolSection", {})

        # Extract study-level info
        nct = s.get("identificationModule", {}).get("nctId", "N/A")
        title = s.get("identificationModule", {}).get("briefTitle", "N/A")
        status = s.get("statusModule", {}).get("overallStatus", "N/A")
        phase = ", ".join(s.get("designModule", {}).get("phases", ["N/A"]))
        conditions = "; ".join(s.get("conditionsModule", {}).get("conditions", []))
        enrollment = s.get("designModule", {}).get("enrollmentInfo", {}).get("count", "N/A")
        study_type = s.get("designModule", {}).get("studyType", "N/A")
        start_date = to_date(s.get("statusModule", {}).get("startDateStruct", {}).get("date"))
        completion_date = to_date(s.get("statusModule", {}).get("completionDateStruct", {}).get("date"))
        first_posted = to_date(s.get("statusModule", {}).get("studyFirstPostDateStruct", {}).get("date"))
        last_update = to_date(s.get("statusModule", {}).get("lastUpdatePostDateStruct", {}).get("date"))

        studies_list.append({
            "NCT Number": nct,
            "Title": title,
            "Status": status,
            "Phase": phase,
            "Conditions": conditions,
            "Enrollment": enrollment,
            "Study Type": study_type,
            "Start Date": start_date,
            "Completion Date": completion_date,
            "First Posted": first_posted,
            "Last Update Posted": last_update
        })

        # Extract countries
        if "contactsLocationsModule" in s and "locations" in s["contactsLocationsModule"]:
            for loc in s["contactsLocationsModule"]["locations"]:
                country = loc.get("country")
                if country:
                    countries_list.append({"NCT Number": nct, "Country": country})

# Convert to DataFrames
studies_df = pd.DataFrame(studies_list)
countries_df = pd.DataFrame(countries_list)

# Save CSVs
studies_df.to_csv("studies_clean.csv", index=False)
countries_df.to_csv("countries.csv", index=False)

print(" Saved studies_clean.csv with", len(studies_df), "rows")
print(" Saved countries.csv with", len(countries_df), "rows")

# 1. Check statuses
print("Unique statuses:", studies_df["Status"].unique())

# 2. Count of statuses
print("\nStatus distribution:")
print(studies_df["Status"].value_counts())

# 3. Phase distribution
print("\nPhase distribution:")
print(studies_df["Phase"].value_counts())

# 4. Countries checks
print("\nCountry table size:", len(countries_df))
print("Unique trials in countries:", countries_df["NCT Number"].nunique())
print("Duplicate trial-country rows:", countries_df.duplicated().sum())

# 5. Sample preview
print("\nStudies sample:")
print(studies_df.head(3))

print("\nCountries sample:")
print(countries_df.head(10))

# Drop duplicate trial-country pairs
countries_df = countries_df.drop_duplicates()

print("After deduplication:")
print("Total rows:", len(countries_df))
print("Unique trials in countries:", countries_df["NCT Number"].nunique())

# Count how many countries each trial appears in
trial_country_counts = countries_df.groupby("NCT Number")["Country"].nunique()

print("Trials with exactly 1 country:", (trial_country_counts == 1).sum())
print("Trials with multiple countries:", (trial_country_counts > 1).sum())
print("Max countries for a single trial:", trial_country_counts.max())

# Compare sizes
print("Trials in studies_clean:", studies_df["NCT Number"].nunique())
print("Trials in countries:", countries_df["NCT Number"].nunique())

# Ensure all trials in countries exist in studies
missing = set(countries_df["NCT Number"]) - set(studies_df["NCT Number"])
print("Trials in countries but not in studies:", len(missing))